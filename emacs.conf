;;; package --- emacs setting

(require 'package)
;; Add the original Emacs Lisp Package Archive
(add-to-list 'package-archives '("elpa" . "http://tromey.com/elpa/"))

;; Add the user-contributed repository
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)

(package-initialize)

;; (require 'graphene)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (tango-dark)))
 '(custom-safe-themes
   (quote
    ("4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" "82d2cac368ccdec2fcc7573f24c3f79654b78bf133096f9b40c20d97ec1d8016" default)))
 '(package-selected-packages
   (quote
    (cnfonts graphene magit protobuf-mode dockerfile-mode flymake-python-pyflakes format-all indent-tools jedi pydoc python-mode go-eldoc go-guru go-imports go-mode go-autocomplete ## Save-visited-files)))
 '(safe-local-variable-values
   (quote
    ((eval ignore-errors "Write-contents-functions is a buffer-local alternative to before-save-hook"
	   (add-hook
	    (quote write-contents-functions)
	    (lambda nil
	      (delete-trailing-whitespace)
	      nil))
	   (require
	    (quote whitespace))
	   "Sometimes the mode needs to be toggled off and on."
	   (whitespace-mode 0)
	   (whitespace-mode 1))
     (whitespace-line-column . 80)
     (whitespace-style face trailing lines-tail)
     (require-final-newline . t)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )



;; ************************************************************
;; golang setting
;; ************************************************************
(setenv "GOPATH" "/home/azer/source/gopath")
(setenv "GOROOT" "/home/azer/source/go")
(setq exec-path (cons "/home/azer/source/go/bin" exec-path))
(setq exec-path (cons "/home/azer/source/gopath/bin" exec-path))
(add-to-list 'exec-path "/home/azer/source/gopath/bin")

;; install init-go
(require 'go-autocomplete)



(add-to-list 'ac-dictionary-directories "~/.emacs.d/lisp/ac-dict")
(add-to-list 'ac-modes 'go-mode)
(ac-config-default)

;; go-guru setting
(require 'go-guru)
(add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)

(add-hook 'go-mode-hook 'go-eldoc-setup)

(add-hook 'go-mode-hook (lambda ()
                          (set (make-local-variable 'company-backends) '(company-go))
                          (company-mode)))

(defun go-run-buffer()
 (interactive)
 (shell-command (concat "/home/azer/source/go/bin/go run " (buffer-name))))


(add-hook
 'go-mode-hook
 (lambda ()
   ;; Outline mode
   (make-local-variable 'outline-regexp)
   (setq outline-regexp "//\\.\\|//[^\r\n\f][^\r\n\f]\\|pack\\|func\\|impo\\|cons\\|var.\\|type\\|\t\t*....")
   (local-set-key (kbd "C-c C-g") 'go-goto-imports)

   ;;; (load-file "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")

   ;; Use goimports instead of go-fmt
   (setq gofmt-command "goimports")

   ;; Customize compile command to run go build
   (if (not (string-match "go" compile-command))
       (set (make-local-variable 'compile-command)
            "go generate && go build -v && go test -v && go vet"))

   ;; auto gofmt
   (add-hook 'before-save-hook 'gofmt-before-save)
   ;; (add-hook 'before-save-hook 'go-remove-unused-imports)
   (setq tab-width 4)
   (setq indent-tabs-mode 1)))


(eval-after-load 'go-mode
  '(define-key go-mode-map (kbd "C-c C-c") 'go-run-buffer))

(eval-after-load 'go-mode
  '(define-key go-mode-map (kbd "C-c C-d") 'godoc))


;; godef setting
(defun my-go-mode-hook ()
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump))
(add-hook 'go-mode-hook 'my-go-mode-hook)


(defun my-python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my-python-mode-hook)

(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (replace-regexp-in-string
                          "[ \t\n]*$"
                          ""
                          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq eshell-path-env path-from-shell) ; for eshell users
    (setq exec-path (split-string path-from-shell path-separator))))

(when window-system (set-exec-path-from-shell-PATH))

;; ************************************************************
;; org-reveal setting
;; ************************************************************
;; (require 'ox-reveal)
;; (setq org-reveal-root "file:///home/azer/doc/ppt/reveal.js")
;; (setq org-reveal-root "file:///home/azer/source/reveal.js")



;; ************************************************************
;; misc setting
;; ************************************************************
(require 'tramp)
(setq tramp-default-method "ssh")

;; 可以避免生成*.*~文件
(setq-default make-backup-files nil)

;;设置取消注释选择区域快捷键
(global-set-key (kbd "s-o") 'comment-or-uncomment-region)

;; 设置窗口切换
;; (global-set-key (kbd "<s-up>")    'windmove-up)
;; (global-set-key (kbd "<s-down>")  'windmove-down)
;; (global-set-key (kbd "<s-left>")  'windmove-left)
;; (global-set-key (kbd "<s-right>") 'windmove-right)


;; trailing spaces when saving a file
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;以 y/n代表 yes/no
(fset 'yes-or-no-p 'y-or-n-p)


;; ************************************************************
;; setting fonts
;; ************************************************************
;; (setq default-frame-alist (font . "微软雅黑Monaco 12"))
;; (require 'chinese-fonts-setup)
;; set default font
;;(set-face-attribute 'default nil
;;	    :family "Sarasa Mono SC"
;;	    :height 110
;;	    :weight 'normal
;;	    :width 'normal)
;; (set-default-font "Sarasa Mono SC-18")

;; ************************************************************
;; Create directories that don't exist while creating a new file in emacs
;; ************************************************************
(add-hook 'before-save-hook
          (lambda ()
            (when buffer-file-name
              (let ((dir (file-name-directory buffer-file-name)))
                ;; (when (and (not (file-exists-p dir))
                ;;            (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                (when (not (file-exists-p dir))
                  (make-directory dir t))))))


(require 'cnfonts)
;; 让 cnfonts 随着 Emacs 自动生效。
(cnfonts-enable)
;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
;; (cnfonts-set-spacemacs-fallback-fonts)

(setq cnfonts-use-face-font-rescale t)


;;; .emacs ends here
